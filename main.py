import os
import logging
import datetime
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
from replit import db

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)

# –î–Ω–∏ –Ω–µ–¥–µ–ª–∏
DAY_NAMES = ["monday", "tuesday", "wednesday", "thursday", "friday", "saturday", "sunday"]
DAY_LABELS = {
    "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫": "monday",
    "–í—Ç–æ—Ä–Ω–∏–∫": "tuesday",
    "–°—Ä–µ–¥–∞": "wednesday",
    "–ß–µ—Ç–≤–µ—Ä–≥": "thursday",
    "–ü—è—Ç–Ω–∏—Ü–∞": "friday",
    "–°—É–±–±–æ—Ç–∞": "saturday",
    "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ": "sunday",
    "–°–µ–≥–æ–¥–Ω—è": DAY_NAMES[datetime.datetime.now().weekday()],
    "–ó–∞–≤—Ç—Ä–∞": DAY_NAMES[(datetime.datetime.now().weekday() + 1) % 7],
}

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
MAIN_MENU = ReplyKeyboardMarkup([
    ["‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É", "üìã –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏"],
    ["‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É", "üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É"],
    ["üìÖ –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏"]
], resize_keyboard=True)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç, –°—Ç–µ—Ñ–∞–Ω–∏—è üå∏

–Ø ‚Äî —Ç–≤–æ–π –º—è–≥–∫–∏–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫. –ü–æ–º–æ–≥–∞—é –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –≤–∞–∂–Ω–æ–µ, –Ω–µ –∑–∞–±—ã–≤–∞—Ç—å –æ –Ω—É–∂–Ω–æ–º –∏ —Å–ø–æ–∫–æ–π–Ω–æ –¥–µ—Ä–∂–∞—Ç—å —Ñ–æ–∫—É—Å.

–í–æ—Ç —á—Ç–æ —è —É–º–µ—é:

‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É ‚Äî –Ω–∞–∂–º–∏ –∏ –≤—ã–±–µ—Ä–∏ –¥–µ–Ω—å, –ø–æ—Ç–æ–º –Ω–∞–ø–∏—à–∏, —á—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å  
üìã –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏ ‚Äî –≤—ã–±–µ—Ä–∏ –¥–µ–Ω—å, –∏ —è –ø–æ–∫–∞–∂—É, —á—Ç–æ —Ç—ã –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–ª–∞  
üóë –£–¥–∞–ª–∏—Ç—å ‚Äî –µ—Å–ª–∏ –∑–∞–¥–∞—á–∞ —É–∂–µ –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω–∞  
‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å ‚Äî –µ—Å–ª–∏ —Ç—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∞ —á—Ç–æ-—Ç–æ (–≤ –±—É–¥—É—â–µ–º —ç—Ç–æ –±—É–¥–µ—Ç –∫—Ä–∞—Å–∏–≤–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –∫–∞–∫ ¬´—Å–¥–µ–ª–∞–Ω–Ω–æ–µ¬ª)  
üìÖ –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏ ‚Äî –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –±—ã—Å—Ç—Ä–æ –≤—ã–±—Ä–∞—Ç—å –Ω—É–∂–Ω—ã–π –¥–µ–Ω—å  

–¢—ã –º–æ–∂–µ—à—å –Ω–∞–∂–∏–º–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ, –∏ —è –≤—Å—ë –ø–æ–¥—Å–∫–∞–∂—É —Å–∞–º üòä",
        reply_markup=MAIN_MENU
    )

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
async def handle_add(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ù–∞ –∫–∞–∫–æ–π –¥–µ–Ω—å –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É? (–ù–∞–ø–∏—à–∏ –∏–ª–∏ –≤—ã–±–µ—Ä–∏)",
        reply_markup=ReplyKeyboardMarkup([
            ["–°–µ–≥–æ–¥–Ω—è", "–ó–∞–≤—Ç—Ä–∞"],
            ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞"],
            ["–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
        ], resize_keyboard=True, one_time_keyboard=True))
    context.user_data['state'] = 'awaiting_day_for_add'

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    state = context.user_data.get('state')

    if state == 'awaiting_day_for_add':
        day_key = DAY_LABELS.get(update.message.text)
        if not day_key:
            await update.message.reply_text("–ù–µ –ø–æ–Ω—è–ª –¥–µ–Ω—å. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
            return
        context.user_data['selected_day'] = day_key
        context.user_data['state'] = 'awaiting_task_text'
        await update.message.reply_text("–ù–∞–ø–∏—à–∏ –∑–∞–¥–∞—á—É:", reply_markup=ReplyKeyboardRemove())

    elif state == 'awaiting_task_text':
        task = update.message.text
        day_key = context.user_data.get('selected_day')
        tasks = db.get(day_key, [])
        tasks.append(task)
        db[day_key] = tasks
        context.user_data.clear()
        await update.message.reply_text("–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!", reply_markup=MAIN_MENU)

    elif state == 'awaiting_day_for_view':
        day_key = DAY_LABELS.get(update.message.text)
        if not day_key:
            await update.message.reply_text("–ù–µ –ø–æ–Ω—è–ª –¥–µ–Ω—å. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
            return
        tasks = db.get(day_key, [])
        if not tasks:
            await update.message.reply_text("–ù–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –ø–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç.", reply_markup=MAIN_MENU)
        else:
            text = f"–ó–∞–¥–∞—á–∏ –Ω–∞ {update.message.text}:\n" + '\n'.join([f"{i+1}. {t}" for i, t in enumerate(tasks)])
            await update.message.reply_text(text, reply_markup=MAIN_MENU)
        context.user_data.clear()

# –ü–æ–∫–∞–∑ –∑–∞–¥–∞—á
async def handle_view(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ó–∞–¥–∞—á–∏ –Ω–∞ –∫–∞–∫–æ–π –¥–µ–Ω—å –ø–æ–∫–∞–∑–∞—Ç—å?", reply_markup=ReplyKeyboardMarkup([
        ["–°–µ–≥–æ–¥–Ω—è", "–ó–∞–≤—Ç—Ä–∞"],
        ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞"],
        ["–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
    ], resize_keyboard=True, one_time_keyboard=True))
    context.user_data['state'] = 'awaiting_day_for_view'

def main():
    token = os.environ.get("BOT_TOKEN")
    app = ApplicationBuilder().token(token).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.Regex("^‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É$"), handle_add))
    app.add_handler(MessageHandler(filters.Regex("^üìã –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏$"), handle_view))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    app.run_polling()

if __name__ == '__main__':
    main()
